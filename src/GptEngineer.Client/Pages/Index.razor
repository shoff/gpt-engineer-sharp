@page "/"
@inject NavigationManager Navigation
@inject GlobalStateService StateService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>GptEngineer Sharp</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Alpha: Chat to code</MudText>

<MudPaper Class="chat-user-dialog">
    <MudForm>
        <MudItem Class="pad-left">
            <MudTextField
                @bind-Value="@this.StateService.UserDisplayName" />
        </MudItem>
        <MudItem Class="pad-left">
            <MudTextField Label="Message:" @bind-Value="messageInput" Adornment="Adornment.End" Lines="1"></MudTextField>
        </MudItem>
        <MudItem>
            <input type="hidden" id="user" value="@StateService.UserDisplayName" />
            <MudButton OnClick="Send" Disabled="@(!IsConnected)" Color="Color.Primary">Send</MudButton>
        </MudItem>
    </MudForm>
</MudPaper>

<MudPaper>
    <MudItem id="conversation" Class="chat-dialog conversation">
        <MudList>
            @foreach (var message in messages)
            {
                <MudListItem>@message</MudListItem>
            }
        </MudList>
    </MudItem>
</MudPaper>

<MudAlert Severity="Severity.Normal">
    You can find documentation and examples on our website here:
    <MudLink Href="https://mudblazor.com" Typo="Typo.body2" Color="Color.Inherit"><b>www.mudblazor.com</b></MudLink>
</MudAlert>

@code {
    private HubConnection? hubConnection;
    private readonly List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
       this.userInput = this.StateService.UserDisplayName;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            this.messageInput = null;
            await ScrollToBottom();
            this.StateHasChanged();
        }
        else
        {
            // show error message
        }
    }
    
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottomIfNeeded", "conversation");
    }
}
